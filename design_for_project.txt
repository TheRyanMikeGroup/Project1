File Browser


DESIGN


COMPONENT: class FileViewer

A simple file browser. Will search a web of files on one computer. Uses anchors to call files using an id number associated with it. Anchor will have format of <<information>>[num]. The command ‘g’ then num will bring the user to the anchor’s file.

Public method:

o void run()

    Runs the viewer/browser.  
    
    Implementation: A simple loop that displays the buffer, the menu of commands, reads a command and executes it.  The displaying is delegated to private method display.
		Added: command ‘g’, user enters g then a number of an anchor. The 	 fileveiwer will then open the file associated with that anchor.

Private method:

o void display()

    Displays the buffer and menu of commands, including an error message (if any), the name of the file and the three lines of dashes.  See program specification for details.  

Implementation: Holds the lines of text in a Buffer object.  The displaying of the buffer contents and the execution of the commands is delegated to the Buffer object.

Collaborator: Buffer.


COMPONENT: class Buffer

A buffer for a simple file viewer and browser.  Holds the lines of text and executes commands on them.  Displays the contents of the buffer.  See program specification for details on commands. Displays the contents of the anchor class as <<information>>[num]

Public methods:
          
o Buffer() 

    (Compiler-generated.) Creates an empty buffer and sets the index of the top line to 0. 

o void display() const

    Displays the contents of buffer.
    
o const string & get_file_name() const

    Returns the name of the file.

o void move_to_next_page() 
  void move_to_previous_page() 
  bool open(const string & file_name)
  bool open(const int & index
  
    Executes the corresponding file viewer command on the buffer.  See program specification for details.  The method open returns true if successful.

o void add(const string & word)

    Adds the text to the formatted output of a anchor.

o void add(const string & file, const string & text)

    Formats the imported text to format <<text>>[num]. “add” an anchor.

o void break_paragraph()

    Adds two line spaces
    
o void set_window_height(int h)

    Self-explanatory.

Private:

o void parse_anchor(if stream & input)

	Given the input of the raw anchor from the input file. Determines the “file” and the “text” and then delegates to add(file, text).

Implementation:  Stores each line of text as a string and all the lines in a vector.  Maintains the index of the line currently displayed at the top of the window, as well as the name of the file and the window height.
Finds and reads in anchors in the text. Stores name of file and a piece of text. Is assigned an int variable at run time. Anchors displayed as <<text>>[number]
             
